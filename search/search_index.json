{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"S\u00e9minaire d'algorithmie sur le jeu de la vie","text":""},{"location":"#algorithme","title":"Algorithme","text":"<ul> <li>Le Robert: Ensemble des r\u00e8gles op\u00e9ratoires propres \u00e0 un calcul ; suite de r\u00e8gles formelles.</li> <li>En informatique: ensembles de r\u00e8gles indiquant \u00e0 l'ordinateur comment effectuer une t\u00e2che (datascientest.com).</li> </ul>"},{"location":"#automate-cellulaire","title":"Automate cellulaire","text":"<ul> <li>Objet math\u00e9matique, \u00e9tudi\u00e9 aussi en informatique th\u00e9orique, \u00e9voluant par \u00e9tapes selon des r\u00e8gles tr\u00e8s simples et imitant d'une certaine mani\u00e8re les capacit\u00e9s autoreproductrices des \u00eatres vivants.</li> <li>Un automate cellulaire se d\u00e9roule sur une grille.</li> <li>Chaque des cases de la grille est appel\u00e9e une cellule.</li> <li>Les cellules peuvent prendre plusieurs \u00e9tats.</li> </ul> Vert: arbres, rouge: feu, gris: cendre"},{"location":"#jeu-de-la-vie","title":"Jeu de la vie","text":"<ul> <li>Invent\u00e9 par le math\u00e9maticien britannique John Horton Conway en 1970.</li> <li>C'est l'application la plus c\u00e9l\u00e8bre des automates cellulaires.</li> <li>Chacune de ces cellules a deux \u00e9tats possibles : vivante ou morte.</li> <li>L'\u00e9volution est d\u00e9termin\u00e9e par un ensemble de r\u00e8gles simples mais permettent d\u2019obtenir des motifs tr\u00e8s complexes.</li> </ul> Exemple d'\u00e9volution du jeu de la vie"},{"location":"#environnement-de-developpement","title":"Environnement de d\u00e9veloppement","text":"<ul> <li>Installer un gestionnaire de paquets (permet d'installer facilement des programmes)<ul> <li>Windows: scoop.sh</li> <li>MacOS: homebrew</li> </ul> </li> <li>Une fois l'installation termin\u00e9e, ouvrir un nouveau terminal pour installer python<ul> <li>Windows: <code>scoop install python</code></li> <li>MacOS: <code>brew install python</code></li> </ul> </li> <li>Installer les librairies Python suivantes <code>pip install ipykernel pandas matplotlib numpy ipympl</code></li> <li>Installer Visual Studio Code (ou VSCode)<ul> <li>Installer l'extension python de VSCode </li> </ul> </li> </ul>"},{"location":"#sources","title":"Sources","text":"<ul> <li>www.tutorialspoint.com</li> <li>andre.lovichi.free.fr</li> <li>www.apprendre-en-ligne.net</li> <li>www.futura-sciences.com</li> <li>fr.wikipedia.org</li> <li>electronut.in</li> </ul>"},{"location":"dames/","title":"Partie de dames automatique","text":"<p>D\u00e9velopper un script Python qui joue un partie de dames automatique.</p>"},{"location":"dames/#regles-du-jeu-de-dames","title":"R\u00e8gles du jeu de dames","text":"<ul> <li>La grille a une taille de 10x10, qu'on appellera \"damier\"</li> <li>Le jeu se joue \u00e0 deux joueurs. Le premier joueur a des pions blancs et le deuxi\u00e8me joueur a des pions noirs</li> <li>Au d\u00e9but du jeu, les pions du joueur 1 sont agenc\u00e9s sur 4 rang\u00e9es \u00e0 partir d'un c\u00f4t\u00e9 du damier.</li> <li>Les pions du joueur sont agenc\u00e9s de fa\u00e7on similaire sur le c\u00f4t\u00e9 oppos\u00e9 du damier.</li> <li>La configurations des pions au d\u00e9but est indiqu\u00e9e dans la figure ci-dessous. Les pions blancs sont repr\u00e9sent\u00e9s par des cases blanches et les pions noirs sont repr\u00e9sent\u00e9s par des cases noires.</li> </ul> <ul> <li>Un pion ne peut peut avance que d'une ligne vers un vers des deux diagonales possibles. Voici un exemple d\u00e9placements possible d'une case blanche et d'une case noire.</li> </ul> <ul> <li>Si un pion rencontre un pion adverse, il est oblig\u00e9 de le manger et d'avancer d'une case suppl\u00e9mentaire.</li> </ul> <ul> <li> <p>Le jeu s'arr\u00eate d\u00e8s qu'un joueur n'a plus de pions.</p> </li> <li> <p>Ce site propose de tester le jeu et voir les r\u00e8gles compl\u00e8tes</p> </li> </ul>"},{"location":"dames/#travail-demande","title":"Travail demand\u00e9","text":"<ul> <li>D\u00e9velopper un jeu du damier o\u00f9 les deux joueurs sont jou\u00e9es par une IA basique.</li> <li>Pour chaque tour, l'action du joueur est ex\u00e9cut\u00e9e de fa\u00e7on al\u00e9atoire tant que l'action est l\u00e9gale.</li> <li>Permettre \u00e0 l'utilisateur de changer la vitesse de jeu les touches + et - de son clavier.</li> <li>Ne pas utiliser de <code>sleep</code> mais utiliser plut\u00f4t l'argument <code>frame</code> de la fonction <code>update</code></li> <li>Afficher sur le graphique les informations sur la partie.</li> <li>Nombre de pi\u00e8ces blanches et nombre de pi\u00e8ces noires.</li> <li>Le r\u00e9sultat de la partie.</li> <li>Vitesse de jeu (ou temps entre deux it\u00e9rations).</li> <li>Permettre \u00e0 l'utilisateur de mettre en pause / reprendre l'animation avec p.</li> <li>Permettre \u00e0 l'utilisateur de sauvegarder dans un fichier l'\u00e9tat courant du programme et de le recharger.</li> <li>Sauvegarde via la touche s du clavier. Le programme se termine ou continue quand on sauvegarde (faire au plus simple).</li> <li>Rechargement via la touche r du clavier ou au d\u00e9marrage du programme.</li> <li>Informations \u00e0 enregistrer: grille actuelle, informations affich\u00e9es \u00e0 l'\u00e9cran ainsi que les r\u00e9glages (vitesse, etc.).</li> </ul>"},{"location":"exercices/","title":"Exercices","text":"<p>Utiliser numpy pour faire ces exercices:</p> <ol> <li>Cr\u00e9er une matrice de 3 lignes et 5 colonnes ne contenant que des False.</li> <li>Cr\u00e9er une matrice de 5 lignes et 5 colonnes contenant al\u00e9atoirement True ou False. (astuce: <code>bool(random.getrandbits(1))</code>)</li> <li>Cr\u00e9er une matrice de 6 lignes et 4 colonnes qui contient les lettres de l'alphabet de gauche \u00e0 droite et de haut en bas.</li> <li>D\u00e9finir une fonction define_life_grid(m, n) qui g\u00e9n\u00e8re une grille de m lignes et n colonnes contenant al\u00e9atoirement True ou False.</li> <li>D\u00e9finir une fonction define_life_grid(m, n, p) qui g\u00e9n\u00e8re une grille de m lignes et n colonnes contenant al\u00e9atoirement True ou False, avec la probabilit\u00e9 p d'avoir True. (astuce: <code>True if random.random() &lt; p else False</code>)</li> </ol> <p>Bonus: faire ces m\u00eames exercices sans utiliser numpy.</p> Solution avec numpy <pre><code>import random\nimport numpy as np\n\n\ndef run_q1():\n    \"\"\"Cr\u00e9er une matrice de 3 lignes et 5 colonnes ne contenant que des False.\"\"\"\n    return np.zeros((3, 5))\n\n\ndef run_q2():\n    \"\"\"Cr\u00e9er une matrice de 5 lignes et 5 colonnes contenant al\u00e9atoirement True ou False\"\"\"\n    vals = [False, True]\n    return np.random.choice(vals, (5, 5), p=[0.5, 0.5])\n\n\ndef run_q3():\n    \"\"\"Cr\u00e9er une matrice de 6 lignes et 4 colonnes qui contient les lettres de l'alphabet de gauche \u00e0 droite et de haut en bas.\"\"\"\n    m = np.chararray((6, 4))\n    current_letter = \"a\"\n    for i in range(6):\n        for j in range(4):\n            m[i][j] = current_letter\n            current_letter = chr(ord(current_letter) + 1)\n    return m\n\n\ndef run_q4(m, n):\n    \"\"\"D\u00e9finir une fonction define_life_grid(m, n) qui g\u00e9n\u00e8re une grille de m lignes et n colonnes contenant al\u00e9atoirement True ou False.\"\"\"\n    return np.random.choice([False, True], (m, n), p=[0.5, 0.5])\n\n\ndef run_q5(m, n, p):\n    \"\"\"D\u00e9finir une fonction define_life_grid(m, n, p) qui g\u00e9n\u00e8re une grille de m lignes et n colonnes contenant al\u00e9atoirement True ou False, avec la probabilit\u00e9 p d'avoir True. (astuce: `True if random.random() &lt; p else False`)\"\"\"\n    return np.random.choice([False, True], (m, n), p=[1 - p, p])\n\n\nprint(\"q1\", run_q1())\nprint(\"q2\", run_q2())\nprint(\"q3\", run_q3())\nprint(\"q4\", run_q4(10, 3))\nprint(\"q5\", run_q5(6, 7, 0.44))\n</code></pre> Solution sans numpy <pre><code>import random\n\n\ndef run_q1():\n    \"\"\"Cr\u00e9er une matrice de 3 lignes et 5 colonnes ne contenant que des False.\"\"\"\n    return [[False for j in range(5)] for i in range(3)]\n\n\ndef run_q2():\n    \"\"\"Cr\u00e9er une matrice de 5 lignes et 5 colonnes contenant al\u00e9atoirement True ou False\"\"\"\n    return [[bool(random.getrandbits(1)) for j in range(5)] for i in range(3)]\n\n\ndef run_q3():\n    \"\"\"Cr\u00e9er une matrice de 6 lignes et 4 colonnes qui contient les lettres de l'alphabet de gauche \u00e0 droite et de haut en bas.\"\"\"\n    m = []\n    current_letter = \"a\"\n    for i in range(6):\n        line_items = []\n        for j in range(4):\n            line_items.append(current_letter)\n            current_letter = chr(ord(current_letter) + 1)\n        m.append(line_items)\n    return m\n\n\ndef run_q4(m, n):\n    \"\"\"D\u00e9finir une fonction define_life_grid(m, n) qui g\u00e9n\u00e8re une grille de m lignes et n colonnes contenant al\u00e9atoirement True ou False.\"\"\"\n    return [[bool(random.getrandbits(1)) for j in range(m)] for i in range(n)]\n\n\ndef run_q5(m, n, p):\n    \"\"\"D\u00e9finir une fonction define_life_grid(m, n, p) qui g\u00e9n\u00e8re une grille de m lignes et n colonnes contenant al\u00e9atoirement True ou False, avec la probabilit\u00e9 p d'avoir True. (astuce: `True if random.random() &lt; p else False`)\"\"\"\n    return [\n        [True if random.random() &lt; p else False for j in range(n)] for i in range(m)\n    ]\n\n\nprint(\"q1\", run_q1())\nprint(\"q2\", run_q2())\nprint(\"q3\", run_q3())\nprint(\"q4\", run_q4(10, 3))\nprint(\"q5\", run_q5(6, 7, 0.44))\n</code></pre>"},{"location":"game-of-life/","title":"Jeu de la vie","text":""},{"location":"game-of-life/#regles","title":"R\u00e8gles","text":"<ul> <li>Soit une grille de <code>n</code> lignes et <code>n</code> colonnes</li> <li>Chaque cellule vaut soit <code>True</code> (vivant) ou <code>False</code> (mort)</li> <li>A chaque it\u00e9ration les cellules \u00e9voluent selon l'\u00e9tat de leurs voisons directs.</li> <li>Le voisinage consid\u00e9r\u00e9 est un voisinage de Moore (8 voisins).</li> <li>Les r\u00e8gles de transition sont fonction de l\u2019\u00e9tat de la cellule et du nombre <code>v</code> de voisins vivants :</li> <li>si <code>v &lt; 2</code> l\u2019\u00e9tat suivant est : Mort</li> <li>si <code>v == 2</code> la cellule ne change pas d\u2019\u00e9tat</li> <li>si <code>v == 3</code> l\u2019\u00e9tat suivant est : Vivant</li> <li>si <code>v &gt; 3</code> l\u2019\u00e9tat suivant est : Mort</li> </ul>"},{"location":"game-of-life/#travail-demande","title":"Travail demand\u00e9","text":"<ul> <li>D\u00e9velopper un script python qui affiche le d\u00e9roulement du jeu de la vie sur une grille de dimension n x n. n sera fix\u00e9 au d\u00e9but du script et pourra \u00eatre modifi\u00e9 d'une ex\u00e9cution \u00e0 une autre. (4 pts)</li> <li>Les cellules de la grille initiale auront une chance de 51% de valoir <code>True</code>.</li> <li>Tenter de changer la valeur de la proba pour voir s'il y a des diff\u00e9rences.</li> <li>Cette t\u00e2che est requise pour noter le reste du travail.</li> <li>Permettre \u00e0 l'utilisateur de changer la dur\u00e9e entre deux g\u00e9n\u00e9rations (ou it\u00e9rations) avec les touches + et - de son clavier. (2 pts)</li> <li>Ne pas utiliser de <code>sleep</code> mais utiliser plut\u00f4t l'argument <code>frame</code> de la fonction <code>update</code></li> <li>Afficher sur le graphique les informations sur le programme. (3 pts)</li> <li>Nombre de vivants et de morts total.</li> <li>Nombre de naissance et nom de cellules d\u00e9c\u00e9d\u00e9es lors de la derni\u00e8re l'it\u00e9ration.</li> <li>Vitesse de l'animation (ou temps entre deux it\u00e9rations).</li> <li>Permettre \u00e0 l'utilisateur de mettre en pause / reprendre l'animation avec p. (2 pts)</li> <li>Permettre \u00e0 l'utilisateur de sauvegarder dans un fichier l'\u00e9tat courant du programme et de le recharger. (3 pts)</li> <li>Sauvegarde via la touche s du clavier. Le programme se termine ou continue quand on sauvegarde (faire au plus simple).</li> <li>Rechargement via la touche r du clavier ou au d\u00e9marrage du programme.</li> <li>Informations \u00e0 enregistrer: grille actuelle, informations affich\u00e9es \u00e0 l'\u00e9cran ainsi que les r\u00e9glages (vitesse, etc.)</li> <li>Ajouter un \u00e9tat au jeu de la vie: \"naissance\". (4 pts)</li> <li>Une cellule morte qui satisfait les conditions pour passer vers l'\u00e9tat vivant bascule d'abord vers l'\u00e9tat naissance et y reste pendant b it\u00e9rations avant de passer vers l'\u00e9tat vivant.<ul> <li>C'est-\u00e0-dire qu'au lieu de passer de mort \u00e0 vivant, la cellule passe de mort \u00e0 naissance (qui reste dans cet \u00e9tat pendant b it\u00e9rations), puis \u00e0 vivant.</li> </ul> </li> <li>Si b vaut 0, cela revient au jeu de la vie initial.</li> <li>Une cellule en \u00e9tat naissance n'est pas comprise dans les r\u00e8gles de transition (elle est ignor\u00e9e).</li> <li>Permettre \u00e0 l'utilisateur d'incr\u00e9menter / d\u00e9cr\u00e9menter la valeur de b en appuyant sur les touches b et n respectivement.</li> <li>Lors de la g\u00e9n\u00e9ration initiale, il n'y a pas de cellules en naissance.</li> <li>Ajouter une fonctionnalit\u00e9 utile de votre part. (2 pts)</li> </ul>"},{"location":"game-of-life/#astuces-et-conseils","title":"Astuces et conseils","text":"<ul> <li>Changer la couleur de la matrice dessin\u00e9e via matplotlib.</li> </ul> Ce script montre comment capter un pression sur le clavier et comment afficher \u00e0 l'utilisateur des informations sur le graphique <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom matplotlib.colors import ListedColormap\n\nN = 3\np = 0.8\nvals = [0, 1, 2]\ngrid = np.random.choice(vals, (N, N), p=[0.25, 0.25, 0.5])\nfig, ax = plt.subplots()\nmat = ax.matshow(grid, cmap=ListedColormap([\"k\", \"w\", \"r\"]))\n\ngrid = np.random.choice(vals, (N, N), p=[1 - p, p, 0])\nmat.set_data(grid)\n\nlast_key_pressed = None\n\nfigtext = plt.figtext(\n    0.5, 0.01, \"\", wrap=True, horizontalalignment=\"center\", fontsize=12\n)\n\n\ndef update(frame):\n    figtext.set_text(f\"Frame: {frame}. Last key pressed: {last_key_pressed}\")\n    grid = np.random.choice(vals, (N, N), p=[0.25, 0.75, 0])\n    print(grid)\n    mat.set_data(grid)\n\n\nani = animation.FuncAnimation(fig, update, interval=1000, save_count=50)\n\n\ndef on_press(event):\n    # Quand on modifie une variable globale, il faut ajouter cette ligne\n    global last_key_pressed\n    last_key_pressed = event.key\n    return event\n\n\nfig.canvas.mpl_connect(\"key_press_event\", on_press)\n\nplt.show()\n</code></pre> Ce script montre comment sauvegarder des donn\u00e9es dans un fichier <pre><code>import json\n\ndata = [[y + x * 10 for y in range(4)] for x in range(5)]\ndict = {'data': data, 'alive_count': 10}\njson = json.dumps(dict)\n\nwith open(\"game_of_life_state.json\", \"w\") as json_file:\n    json_file.write(json)\n</code></pre> Ce script montre comment charger des donn\u00e9es depuis un fichier <pre><code>import json\n\nwith open('game_of_life_state.json') as json_file:\n    state = json.load(json_file)\n    print(\"alive_count\", state[\"alive_count\"])\n    print(\"Data\", state[\"data\"])\n</code></pre>"},{"location":"numpy-matplotlib/","title":"Utilisation des librairies numpy et matplotlib","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport pandas as pd\n\nl1 = np.zeros(5)\nprint(\"l1\", l1)\n\nl2 = np.zeros((2, 5))\npd.DataFrame(l2)\n</pre> import numpy as np import pandas as pd  l1 = np.zeros(5) print(\"l1\", l1)  l2 = np.zeros((2, 5)) pd.DataFrame(l2) <pre>l1 [0. 0. 0. 0. 0.]\n</pre> Out[1]: 0 1 2 3 4 0 0.0 0.0 0.0 0.0 0.0 1 0.0 0.0 0.0 0.0 0.0 <ul> <li><code>np.random.choice</code> permet de g\u00e9n\u00e9rer des donn\u00e9es al\u00e9atoirement avec une proba</li> </ul> In\u00a0[2]: Copied! <pre>import numpy as np\nimport pandas as pd\n\nN = 10\np = 0.25\nvals = [\"A\", \"B\", \"C\", \"D\"]\n\nitems = np.random.choice(vals, N, p=[p, p, p, p])\nprint(items)\n</pre> import numpy as np import pandas as pd  N = 10 p = 0.25 vals = [\"A\", \"B\", \"C\", \"D\"]  items = np.random.choice(vals, N, p=[p, p, p, p]) print(items) <pre>['B' 'B' 'B' 'A' 'D' 'B' 'B' 'A' 'D' 'B']\n</pre> In\u00a0[3]: Copied! <pre>import numpy as np\nimport pandas as pd\n\nN = 4\np = 0.8\nvals = [False, True]\n\ngrid = np.random.choice(vals, N*N, p=[1-p, p]).reshape(N, N)\npd.DataFrame(grid)\n</pre> import numpy as np import pandas as pd  N = 4 p = 0.8 vals = [False, True]  grid = np.random.choice(vals, N*N, p=[1-p, p]).reshape(N, N) pd.DataFrame(grid) Out[3]: 0 1 2 3 0 False True True True 1 True True True True 2 True True False True 3 False True True True In\u00a0[4]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\nN = 4\np = 0.8\nvals = [False, True]\n\ngrid = np.random.choice(vals, N*N, p=[1-p, p]).reshape(N, N)\n\nfig, ax = plt.subplots()\n# Remplacer grid par votre matrice\nmat = ax.matshow(grid) \nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt  N = 4 p = 0.8 vals = [False, True]  grid = np.random.choice(vals, N*N, p=[1-p, p]).reshape(N, N)  fig, ax = plt.subplots() # Remplacer grid par votre matrice mat = ax.matshow(grid)  plt.show()  <ul> <li><code>ListedColormap</code> permet de changer la couleur des cellules</li> </ul> <pre>from matplotlib.colors import ListedColormap\ncmap = ListedColormap(['k', 'w', 'r'])\n# ou en RGB ListedColormap([[0, 0, 0], [1, 1, 1], [1, 0, 0]])\ncax = ax.matshow(x,cmap=cmap)\n</pre> In\u00a0[5]: Copied! <pre>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\n\nN = 4\np = 0.6\nvals = [0, 1, 2]\n# [0.5, 0.2, 0.2] -&gt; rgb. w -&gt; white, b -&gt; blue\ncmap = ListedColormap([[0.5, 0.2, 0.2], 'w', 'b'])\ngrid = np.random.choice(vals, N*N, p=[1-p-0.2, p, 0.2]).reshape(N, N)\n\nprint(pd.DataFrame(grid))\n\nfig, ax = plt.subplots()\nmat = ax.matshow(grid, cmap = cmap)\nplt.show()\n</pre> import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import ListedColormap  N = 4 p = 0.6 vals = [0, 1, 2] # [0.5, 0.2, 0.2] -&gt; rgb. w -&gt; white, b -&gt; blue cmap = ListedColormap([[0.5, 0.2, 0.2], 'w', 'b']) grid = np.random.choice(vals, N*N, p=[1-p-0.2, p, 0.2]).reshape(N, N)  print(pd.DataFrame(grid))  fig, ax = plt.subplots() mat = ax.matshow(grid, cmap = cmap) plt.show() <pre>   0  1  2  3\n0  1  2  2  1\n1  2  0  1  0\n2  1  0  1  1\n3  1  1  0  1\n</pre> <ul> <li>La composante <code>animation</code> de <code>matplotlib</code> permet de mettre \u00e0 jour le graphique.</li> <li>Il faut appeler la m\u00e9thode <code>animation.FuncAnimation(fig, update, interval=50, save_count=50)</code>.<ul> <li>update: fonction \u00e0 d\u00e9finir qui retourne les nouvelles valeurs de la matrice.</li> </ul> </li> <li>\u26a0: Les animations ne fonctionnent pas sur un navigateuer.</li> </ul> In\u00a0[6]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\n\nN = 4\np = 0.8\nvals = [False, True]\ngrid = np.random.choice(vals, N*N, p=[1-p, p]).reshape(N, N)\n\nfig, ax = plt.subplots()\nmat = ax.matshow(grid)\n\n\ndef update(frame):\n    grid = np.random.choice(vals, N*N, p=[1-p, p]).reshape(N, N)\n    mat.set_data(grid)\n\nani = animation.FuncAnimation(fig, update, interval=100, save_count=50)\nplt.show()\n</pre> import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation  N = 4 p = 0.8 vals = [False, True] grid = np.random.choice(vals, N*N, p=[1-p, p]).reshape(N, N)  fig, ax = plt.subplots() mat = ax.matshow(grid)   def update(frame):     grid = np.random.choice(vals, N*N, p=[1-p, p]).reshape(N, N)     mat.set_data(grid)  ani = animation.FuncAnimation(fig, update, interval=100, save_count=50) plt.show()"},{"location":"numpy-matplotlib/#utilisation-des-librairies-numpy-et-matplotlib","title":"Utilisation des librairies numpy et matplotlib\u00b6","text":"<ul> <li>numpy est une librairie permettant de simplifier la manipulation des matrices</li> <li>matplotlib est une librairie permettant de dessiner des graphiques</li> <li>Elles sont install\u00e9es avec pip: <code>pip install matplotlib numpy</code></li> </ul>"},{"location":"numpy-matplotlib/#numpy","title":"numpy\u00b6","text":"<ul> <li><code>np.zeros</code> permet de g\u00e9n\u00e9rer des z\u00e9ros</li> </ul>"},{"location":"numpy-matplotlib/#matplotlib","title":"matplotlib\u00b6","text":"<ul> <li>Une des fonctions de matplotlib est de dessiner une matrice</li> </ul>"},{"location":"python-avance/","title":"Fonctionnalit\u00e9s avanc\u00e9es","text":"In\u00a0[1]: Copied! <pre>numbers = [0 for x in range(8)]\nprint(\"[0 for x in range(8)]\", numbers)\nnumbers = []\nfor x in range(8):\n    numbers.append(0)\nprint(\"avec un for\", numbers)\nprint(\"[x for x in range(4)] -&gt;\", [x for x in range(4)])\nprint(\"[x * 2 for x in range(4)] -&gt;\", [x * 2 for x in range(4)])\nprint(\"[x for x in range(4) if x % 2 == 0] -&gt;\",\n      [x for x in range(4) if x % 2 == 0])\nprint(\"[x + 2 for x in range(4) if x % 2 == 0] -&gt;\",\n      [x + 2 for x in range(4) if x % 2 == 0])\n\nitems = [\"I\", \"love\", \"python\"]\nprint(items)\nprint(\"[len(x) for x in items] -&gt;\", [len(x) for x in items])\nprint(\"[x[2:] for x in items] -&gt;\", [x[2:]\n      for x in items])\nprint(\"[x[2:] for x in items if len(x) &gt; 2] -&gt;\", [x[2:]\n      for x in items if len(x) &gt; 2])\n</pre> numbers = [0 for x in range(8)] print(\"[0 for x in range(8)]\", numbers) numbers = [] for x in range(8):     numbers.append(0) print(\"avec un for\", numbers) print(\"[x for x in range(4)] -&gt;\", [x for x in range(4)]) print(\"[x * 2 for x in range(4)] -&gt;\", [x * 2 for x in range(4)]) print(\"[x for x in range(4) if x % 2 == 0] -&gt;\",       [x for x in range(4) if x % 2 == 0]) print(\"[x + 2 for x in range(4) if x % 2 == 0] -&gt;\",       [x + 2 for x in range(4) if x % 2 == 0])  items = [\"I\", \"love\", \"python\"] print(items) print(\"[len(x) for x in items] -&gt;\", [len(x) for x in items]) print(\"[x[2:] for x in items] -&gt;\", [x[2:]       for x in items]) print(\"[x[2:] for x in items if len(x) &gt; 2] -&gt;\", [x[2:]       for x in items if len(x) &gt; 2])  <pre>[0 for x in range(8)] [0, 0, 0, 0, 0, 0, 0, 0]\navec un for [0, 0, 0, 0, 0, 0, 0, 0]\n[x for x in range(4)] -&gt; [0, 1, 2, 3]\n[x * 2 for x in range(4)] -&gt; [0, 2, 4, 6]\n[x for x in range(4) if x % 2 == 0] -&gt; [0, 2]\n[x + 2 for x in range(4) if x % 2 == 0] -&gt; [2, 4]\n['I', 'love', 'python']\n[len(x) for x in items] -&gt; [1, 4, 6]\n[x[2:] for x in items] -&gt; ['', 've', 'thon']\n[x[2:] for x in items if len(x) &gt; 2] -&gt; ['ve', 'thon']\n</pre> In\u00a0[2]: Copied! <pre>t = [[11, 12, 5, 2], [15, 6]]\nprint(\"t -&gt;\", t, \"- t[0] -&gt;\", t[0], \"- t[0][1] -&gt;\", t[0][1])\n\nfor ligne in t:\n  print(\"ligne:\", ligne)\n\nprint(\"len(t):\", len(t))\nfor i in range(len(t)):\n  print(\"i -&gt;\", i, \"- t[i] -&gt;\", t[i])\n</pre> t = [[11, 12, 5, 2], [15, 6]] print(\"t -&gt;\", t, \"- t[0] -&gt;\", t[0], \"- t[0][1] -&gt;\", t[0][1])  for ligne in t:   print(\"ligne:\", ligne)  print(\"len(t):\", len(t)) for i in range(len(t)):   print(\"i -&gt;\", i, \"- t[i] -&gt;\", t[i])  <pre>t -&gt; [[11, 12, 5, 2], [15, 6]] - t[0] -&gt; [11, 12, 5, 2] - t[0][1] -&gt; 12\nligne: [11, 12, 5, 2]\nligne: [15, 6]\nlen(t): 2\ni -&gt; 0 - t[i] -&gt; [11, 12, 5, 2]\ni -&gt; 1 - t[i] -&gt; [15, 6]\n</pre> <ul> <li>Si toutes les sous-listes ont le m\u00eame nombre d'\u00e9l\u00e9ments, on aura alors une matrice<ul> <li>Le nombre de lignes: est le nombre d'\u00e9l\u00e9ments de la liste m\u00e8re</li> <li>Le nombre de colonnes: est le nombre d'\u00e9l\u00e9ments des sous-listes</li> </ul> </li> </ul> In\u00a0[3]: Copied! <pre>m = [[11, 12, 5], [6, -5, 22]]\nprint(m)\nprint(\"Nombre de ligne de la matrices -&gt;\", len(m))\nprint(\"Nombre de colonnes de la matrices -&gt;\", len(m[0]))\n\nl, c = len(m), len(m[0])\nprint(\"La matrice a\", l, \"ligne et\", c, \"colonnes\")\n\n# Installer avec un: pip install pandas\nimport pandas as pd\npd.DataFrame(m)\n</pre> m = [[11, 12, 5], [6, -5, 22]] print(m) print(\"Nombre de ligne de la matrices -&gt;\", len(m)) print(\"Nombre de colonnes de la matrices -&gt;\", len(m[0]))  l, c = len(m), len(m[0]) print(\"La matrice a\", l, \"ligne et\", c, \"colonnes\")  # Installer avec un: pip install pandas import pandas as pd pd.DataFrame(m) <pre>[[11, 12, 5], [6, -5, 22]]\nNombre de ligne de la matrices -&gt; 2\nNombre de colonnes de la matrices -&gt; 3\nLa matrice a 2 ligne et 3 colonnes\n</pre> Out[3]: 0 1 2 0 11 12 5 1 6 -5 22 <ul> <li>On peut parcourir un tableau \u00e0 deux dimensions avec deux boucles for imbriqu\u00e9es</li> </ul> In\u00a0[4]: Copied! <pre>for ligne in m:\n  print(\"ligne courante\", ligne)\n  for j in ligne:\n    print(\"element\", j)\n</pre> for ligne in m:   print(\"ligne courante\", ligne)   for j in ligne:     print(\"element\", j) <pre>ligne courante [11, 12, 5]\nelement 11\nelement 12\nelement 5\nligne courante [6, -5, 22]\nelement 6\nelement -5\nelement 22\n</pre> In\u00a0[5]: Copied! <pre>for i in range(len(m)):\n  print(\"i:\", i, \"- t[i]:\", m[i])\n  for j in range(len(m[i])):\n      print(\"i -&gt;\", i, \"- j -&gt;\", j, \"- t[i][j] -&gt;\", m[i][j])\n</pre> for i in range(len(m)):   print(\"i:\", i, \"- t[i]:\", m[i])   for j in range(len(m[i])):       print(\"i -&gt;\", i, \"- j -&gt;\", j, \"- t[i][j] -&gt;\", m[i][j]) <pre>i: 0 - t[i]: [11, 12, 5]\ni -&gt; 0 - j -&gt; 0 - t[i][j] -&gt; 11\ni -&gt; 0 - j -&gt; 1 - t[i][j] -&gt; 12\ni -&gt; 0 - j -&gt; 2 - t[i][j] -&gt; 5\ni: 1 - t[i]: [6, -5, 22]\ni -&gt; 1 - j -&gt; 0 - t[i][j] -&gt; 6\ni -&gt; 1 - j -&gt; 1 - t[i][j] -&gt; -5\ni -&gt; 1 - j -&gt; 2 - t[i][j] -&gt; 22\n</pre> In\u00a0[6]: Copied! <pre>import pandas as pd\nl = [[0, 1, 2] for x in range(4)]\npd.DataFrame(l)\n</pre> import pandas as pd l = [[0, 1, 2] for x in range(4)] pd.DataFrame(l) Out[6]: 0 1 2 0 0 1 2 1 0 1 2 2 0 1 2 3 0 1 2 In\u00a0[7]: Copied! <pre>pd.DataFrame([[x + 1, 0, x * 2, x ** 2] for x in range(2)])\n</pre> pd.DataFrame([[x + 1, 0, x * 2, x ** 2] for x in range(2)]) Out[7]: 0 1 2 3 0 1 0 0 0 1 2 0 2 1 In\u00a0[8]: Copied! <pre>l = [[0 for y in range(10)] for x in range(2)]\npd.DataFrame(l)\n</pre> l = [[0 for y in range(10)] for x in range(2)] pd.DataFrame(l) Out[8]: 0 1 2 3 4 5 6 7 8 9 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 In\u00a0[9]: Copied! <pre>pd.DataFrame([[y for y in range(10)] for x in range(2)])\n</pre> pd.DataFrame([[y for y in range(10)] for x in range(2)]) Out[9]: 0 1 2 3 4 5 6 7 8 9 0 0 1 2 3 4 5 6 7 8 9 1 0 1 2 3 4 5 6 7 8 9 In\u00a0[10]: Copied! <pre>pd.DataFrame([[x * 2 + y for y in range(10)] for x in range(3)])\n</pre> pd.DataFrame([[x * 2 + y for y in range(10)] for x in range(3)]) Out[10]: 0 1 2 3 4 5 6 7 8 9 0 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 11 2 4 5 6 7 8 9 10 11 12 13"},{"location":"python-avance/#fonctionnalites-avancees","title":"Fonctionnalit\u00e9s avanc\u00e9es\u00b6","text":""},{"location":"python-avance/#generation-dune-liste-avec-la-comprehension-de-liste","title":"G\u00e9n\u00e9ration d'une liste avec la compr\u00e9hension de liste\u00b6","text":"<ul> <li>Permet de cr\u00e9er des listes \u00e0 partir d'un it\u00e9rateur</li> <li>Un it\u00e9rateur est tout ce qui peut \u00eatre parcouru dans un for-each</li> <li>Syntaxe 1: [ 'valeur de l'\u00e9l\u00e9lemnt' for  'varialbe de parcrous' in it\u00e9rateur ]</li> <li>Syntaxe 2: [ 'valeur de l'\u00e9l\u00e9lemnt' for  'varialbe de parcrous' in it\u00e9rateur if condition ]</li> </ul>"},{"location":"python-avance/#listes-a-deux-dimensions","title":"Listes \u00e0 deux dimensions\u00b6","text":"<ul> <li>Elles sont vues comme des listes dont chaque \u00e9l\u00e9ment est une autre list</li> <li>Il n'est pas n\u00e9cessaire que les sous-listes aisent le m\u00eame nombre d'\u00e9l\u00e9ments</li> </ul>"},{"location":"python-avance/#generation-dune-matrice-liste-a-deux-dimensions","title":"G\u00e9n\u00e9ration d'une matrice (liste \u00e0 deux dimensions)\u00b6","text":"<ul> <li>Nous savons que la comp\u00e9hension de liste permet de g\u00e9n\u00e9rer une liste \u00e0 partir d'un it\u00e9rateur:<ul> <li>[ 'valeur de l'\u00e9l\u00e9lement' for  'varialbe de parcrous' in it\u00e9rateur if condition ]</li> </ul> </li> <li>Que se passerait-t-il si on mettait dans 'valeur de l'\u00e9l\u00e9lemnt' une liste ?</li> <li>Que se passerait-t-il si on mettait dans 'valeur de l'\u00e9l\u00e9lemnt' une compr\u00e9hension de liste ?</li> </ul>"},{"location":"python-tour/","title":"Rappls de Python","text":"In\u00a0[1]: Copied! <pre>cat = \"miaou\"\nprint(cat)\nprint(\"Hello\")\nprint(len(cat))\n\nprint('1 == \"1\"', 1 == \"1\")\nprint('1 == True', 1 == True)\nprint('0 == False', 0 == False)\nprint('2 == True -&gt;', 2 == True, '2 == False -&gt;', 2 == False)\nx = 4\n#\"toto\" + x # \u00e9choue en python\ncat = \"toto\" + str(x)\nprint(cat)\nprint(4 + 1.5)\n# On peut assigner deux variables \u00e0 la fois\nplat, dessert = \"Soupe\", \"Pomme\"\nprint(plat, dessert)\n# Permet de permuter deux variables en une ligne de code\nplat, dessert = dessert, plat\nprint(plat, dessert)\n</pre> cat = \"miaou\" print(cat) print(\"Hello\") print(len(cat))  print('1 == \"1\"', 1 == \"1\") print('1 == True', 1 == True) print('0 == False', 0 == False) print('2 == True -&gt;', 2 == True, '2 == False -&gt;', 2 == False) x = 4 #\"toto\" + x # \u00e9choue en python cat = \"toto\" + str(x) print(cat) print(4 + 1.5) # On peut assigner deux variables \u00e0 la fois plat, dessert = \"Soupe\", \"Pomme\" print(plat, dessert) # Permet de permuter deux variables en une ligne de code plat, dessert = dessert, plat print(plat, dessert) <pre>miaou\nHello\n5\n1 == \"1\" False\n1 == True True\n0 == False True\n2 == True -&gt; False 2 == False -&gt; False\ntoto4\n5.5\nSoupe Pomme\nPomme Soupe\n</pre> In\u00a0[2]: Copied! <pre># Cha\u00eene de caract\u00e8res interpol\u00e9e\na = 10\ntext = f\"a: {a}. Fin du texte\"\nprint(text)\n\nlong_text = f\"\"\"\n&lt;html&gt;\n  &lt;head&gt;&lt;/head&gt;\n  &lt;body&gt;hello {a}&lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\nprint(long_text)\n</pre> # Cha\u00eene de caract\u00e8res interpol\u00e9e a = 10 text = f\"a: {a}. Fin du texte\" print(text)  long_text = f\"\"\"  hello {a}  \"\"\" print(long_text) <pre>a: 10. Fin du texte\n\n&lt;html&gt;\n  &lt;head&gt;&lt;/head&gt;\n  &lt;body&gt;hello 10&lt;/body&gt;\n&lt;/html&gt;\n\n</pre> In\u00a0[3]: Copied! <pre>def add(x, y):\n  return x + y\n\n# Appel de fonction\nprint(add(5, 6))\n\n# En python, on suit par d\u00e9faut la convention du snake_case\ndef add_and_multiply(x, y):\n  return x + y, x * y\n\na, b = add_and_multiply(10, 4)\nprint(a, b)\n</pre> def add(x, y):   return x + y  # Appel de fonction print(add(5, 6))  # En python, on suit par d\u00e9faut la convention du snake_case def add_and_multiply(x, y):   return x + y, x * y  a, b = add_and_multiply(10, 4) print(a, b) <pre>11\n14 40\n</pre> <ul> <li>Python supporte la programmation fonctionnelle.</li> <li>Fonction comme \u00e9l\u00e9ment de premi\u00e8re classe: les fonctions peuvent \u00eatre manipul\u00e9es comme des varaibles. C'est-\u00e0-dire qu'on peut assigner une fonction \u00e0 une variable ou un argument.</li> <li>On peut d\u00e9finir des fonction anonymes qu'on appelle des lambdas. On peut directement les assigner \u00e0 une variable ou un argument.</li> </ul> In\u00a0[4]: Copied! <pre>g = add\ng = 10\nprint(g)\ng = add\nprint(g(10, -1))\n\ndef compute(f):\n  \"\"\"Appelle l'argument f et retour son r\u00e9sultat\"\"\"\n  x = f(0, -1)\n  return f(x, -7)\n\nprint(compute(add))\nprint(compute(g))\nprint(compute(lambda a, b: a - b))\nlam = lambda u, v: u - v\nprint(compute(lam))\n</pre> g = add g = 10 print(g) g = add print(g(10, -1))  def compute(f):   \"\"\"Appelle l'argument f et retour son r\u00e9sultat\"\"\"   x = f(0, -1)   return f(x, -7)  print(compute(add)) print(compute(g)) print(compute(lambda a, b: a - b)) lam = lambda u, v: u - v print(compute(lam)) <pre>10\n9\n-8\n-8\n8\n8\n</pre> In\u00a0[5]: Copied! <pre>res = print(2)\nprint(res)\nprint(print(2 * 10))\n</pre> res = print(2) print(res) print(print(2 * 10)) <pre>2\nNone\n20\nNone\n</pre> In\u00a0[6]: Copied! <pre>x = 4\n\nif x == 4:\n    print(\"vrai\")\nelif x == 6:\n    print(\"c'est \u00e9gal \u00e0 6\")\nelse:\n    print(\"faux\")\n\nannee = 2008\ntypeAnnee = \"non bissextile\" if annee % 4 != 0 else \"bissextile\"\nprint(typeAnnee)\n\nif x == 5:\n    pass\nelse:\n    print(\"dans le else\")\n</pre> x = 4  if x == 4:     print(\"vrai\") elif x == 6:     print(\"c'est \u00e9gal \u00e0 6\") else:     print(\"faux\")  annee = 2008 typeAnnee = \"non bissextile\" if annee % 4 != 0 else \"bissextile\" print(typeAnnee)  if x == 5:     pass else:     print(\"dans le else\") <pre>vrai\nbissextile\ndans le else\n</pre> In\u00a0[7]: Copied! <pre># boucle while\ncount = 0\nwhile count &lt; 2:\n    print('The count is:', count)\n    count += 1\n</pre> # boucle while count = 0 while count &lt; 2:     print('The count is:', count)     count += 1 <pre>The count is: 0\nThe count is: 1\n</pre> In\u00a0[8]: Copied! <pre># Listes (le nom des tableaux en python)\nitems = [42, 55]\npreums, deus = items\nprint(\"preums et deus\", preums, deus)\n\nitems = [42, 55, \"Hello\", -10]\nprint(items[0])\nprint(items[1])\nprint(items[2])\nprint(items[3])\n\n# For each\nfor item in items:\n    print(item)\n</pre> # Listes (le nom des tableaux en python) items = [42, 55] preums, deus = items print(\"preums et deus\", preums, deus)  items = [42, 55, \"Hello\", -10] print(items[0]) print(items[1]) print(items[2]) print(items[3])  # For each for item in items:     print(item) <pre>preums et deus 42 55\n42\n55\nHello\n-10\n42\n55\nHello\n-10\n</pre> In\u00a0[9]: Copied! <pre># range permet de g\u00e9n\u00e9rer une s\u00e9quence de nombres\n# S\u00e9quence d'entier de 0 \u00e0 10 exclu avec un pas de 1 [0, 10[\nr = range(10)\nprint(r, list(r))\n\n# S\u00e9quence d'entiers de 0 \u00e0 10 exclu avec un pas de 2\nr = range(0, 10, 2)\nprint(r, list(r))\n\n# S\u00e9quence d'entiers de 11 \u00e0 203 exclu avec un pas de 5\nr = range(11, 203, 5)\nprint(r, list(r))\n\nfor i in range(4):\n    print(i)\n\nprint(\"range avec intervalle (borne inf, borne sup, pas)\")\nfor i in range(1, 3):\n    print(i)\n\nfor i in range(1000, -48):\n    print(i)\n\nfor i in [0, 1, 2, 3]:\n    print(i)\n\nfor i in range(4):\n    print(\"avec range\", i)\n\n# Parcours via les indices\n# range retourne une s\u00e9quence (ou suite) d'entiers qui commence \u00e0 0\nitems = [42, 55, \"Hello\", -10]\nfor i in range(len(items)):\n    print(i, \"-&gt;\", items[i])\n</pre> # range permet de g\u00e9n\u00e9rer une s\u00e9quence de nombres # S\u00e9quence d'entier de 0 \u00e0 10 exclu avec un pas de 1 [0, 10[ r = range(10) print(r, list(r))  # S\u00e9quence d'entiers de 0 \u00e0 10 exclu avec un pas de 2 r = range(0, 10, 2) print(r, list(r))  # S\u00e9quence d'entiers de 11 \u00e0 203 exclu avec un pas de 5 r = range(11, 203, 5) print(r, list(r))  for i in range(4):     print(i)  print(\"range avec intervalle (borne inf, borne sup, pas)\") for i in range(1, 3):     print(i)  for i in range(1000, -48):     print(i)  for i in [0, 1, 2, 3]:     print(i)  for i in range(4):     print(\"avec range\", i)  # Parcours via les indices # range retourne une s\u00e9quence (ou suite) d'entiers qui commence \u00e0 0 items = [42, 55, \"Hello\", -10] for i in range(len(items)):     print(i, \"-&gt;\", items[i]) <pre>range(0, 10) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrange(0, 10, 2) [0, 2, 4, 6, 8]\nrange(11, 203, 5) [11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 91, 96, 101, 106, 111, 116, 121, 126, 131, 136, 141, 146, 151, 156, 161, 166, 171, 176, 181, 186, 191, 196, 201]\n0\n1\n2\n3\nrange avec intervalle (borne inf, borne sup, pas)\n1\n2\n0\n1\n2\n3\navec range 0\navec range 1\navec range 2\navec range 3\n0 -&gt; 42\n1 -&gt; 55\n2 -&gt; Hello\n3 -&gt; -10\n</pre> In\u00a0[10]: Copied! <pre># listes: el\u00e9ments ordonn\u00e9es identif\u00e9s par leur indice\nmessages = [\"J'aime\", \"le\", \"langage\", \"Python\"]\nprint(messages, \"- item count: \", len(messages))\nmessages.append(\"2022\")\nprint(\"after append\", messages)\nlast_message = messages.pop()\nprint(\"after pop\", last_message, messages, messages[-1])\nmessages.pop(2)\nprint(\"after pop [2]\", messages)\nprint(\"messages[1]-&gt;\", messages[1], \"- messages[-1]-&gt;\", messages[-1])\nprint(\"messages[-2]-&gt;\", messages[-2], \"- messages[-3]-&gt;\", messages[-3])\nprint(\"messages[0:2]-&gt;\", messages[0:2], \"- messages[:2]-&gt;\", messages[:2])\nprint(\"messages[1:]-&gt;\", messages[1:], \"- (copie) messages[:]-&gt;\", messages[:])\nprint(type(messages))\nmessage = \"Bonjour\"\nprint(message[1:5]) # [1:5[\n</pre> # listes: el\u00e9ments ordonn\u00e9es identif\u00e9s par leur indice messages = [\"J'aime\", \"le\", \"langage\", \"Python\"] print(messages, \"- item count: \", len(messages)) messages.append(\"2022\") print(\"after append\", messages) last_message = messages.pop() print(\"after pop\", last_message, messages, messages[-1]) messages.pop(2) print(\"after pop [2]\", messages) print(\"messages[1]-&gt;\", messages[1], \"- messages[-1]-&gt;\", messages[-1]) print(\"messages[-2]-&gt;\", messages[-2], \"- messages[-3]-&gt;\", messages[-3]) print(\"messages[0:2]-&gt;\", messages[0:2], \"- messages[:2]-&gt;\", messages[:2]) print(\"messages[1:]-&gt;\", messages[1:], \"- (copie) messages[:]-&gt;\", messages[:]) print(type(messages)) message = \"Bonjour\" print(message[1:5]) # [1:5[ <pre>[\"J'aime\", 'le', 'langage', 'Python'] - item count:  4\nafter append [\"J'aime\", 'le', 'langage', 'Python', '2022']\nafter pop 2022 [\"J'aime\", 'le', 'langage', 'Python'] Python\nafter pop [2] [\"J'aime\", 'le', 'Python']\nmessages[1]-&gt; le - messages[-1]-&gt; Python\nmessages[-2]-&gt; le - messages[-3]-&gt; J'aime\nmessages[0:2]-&gt; [\"J'aime\", 'le'] - messages[:2]-&gt; [\"J'aime\", 'le']\nmessages[1:]-&gt; ['le', 'Python'] - (copie) messages[:]-&gt; [\"J'aime\", 'le', 'Python']\n&lt;class 'list'&gt;\nonjo\n</pre> In\u00a0[11]: Copied! <pre># Tuples: une liste immuable (ou immutable)\nmenu_items = (\"File\", \"Open\", \"Save\", \"Close\")\nprint(menu_items, menu_items[1:3])\nprint(type(menu_items))\n# menu_items[0] = \"Help\" # erreur car le tuple est en lecture seule\n</pre> # Tuples: une liste immuable (ou immutable) menu_items = (\"File\", \"Open\", \"Save\", \"Close\") print(menu_items, menu_items[1:3]) print(type(menu_items)) # menu_items[0] = \"Help\" # erreur car le tuple est en lecture seule <pre>('File', 'Open', 'Save', 'Close') ('Open', 'Save')\n&lt;class 'tuple'&gt;\n</pre> In\u00a0[12]: Copied! <pre># dictionnaire (map en java): collection de valeurs identifi\u00e9es par des cl\u00e9s\nlol_character = {\"name\": \"ashe\", \"hp\": 80, \"role\": \"adc\", 2: \"Hello\"}\nprint(lol_character[\"name\"], \"-  len(lol_character)\", len(lol_character))\nlol_character[\"attack\"] = 10\nprint(lol_character[\"attack\"])\n\nprint(\"attack\" in lol_character, \"defense\" in lol_character)\n\nfor key in lol_character:\n    print(key, \"-&gt;\", lol_character[key])\n\nfor key, value in lol_character.items():\n    print(key, \"-&gt;\", value)\n\n# ou bien en abr\u00e9g\u00e9\nfor k, v in lol_character.items():\n    print(k, \"-&gt;\", v)\n</pre> # dictionnaire (map en java): collection de valeurs identifi\u00e9es par des cl\u00e9s lol_character = {\"name\": \"ashe\", \"hp\": 80, \"role\": \"adc\", 2: \"Hello\"} print(lol_character[\"name\"], \"-  len(lol_character)\", len(lol_character)) lol_character[\"attack\"] = 10 print(lol_character[\"attack\"])  print(\"attack\" in lol_character, \"defense\" in lol_character)  for key in lol_character:     print(key, \"-&gt;\", lol_character[key])  for key, value in lol_character.items():     print(key, \"-&gt;\", value)  # ou bien en abr\u00e9g\u00e9 for k, v in lol_character.items():     print(k, \"-&gt;\", v) <pre>ashe -  len(lol_character) 4\n10\nTrue False\nname -&gt; ashe\nhp -&gt; 80\nrole -&gt; adc\n2 -&gt; Hello\nattack -&gt; 10\nname -&gt; ashe\nhp -&gt; 80\nrole -&gt; adc\n2 -&gt; Hello\nattack -&gt; 10\nname -&gt; ashe\nhp -&gt; 80\nrole -&gt; adc\n2 -&gt; Hello\nattack -&gt; 10\n</pre> In\u00a0[13]: Copied! <pre># set: ensemble de valeurs uniques non ordonn\u00e9es\nconsoles = {\"Super Nintendo\", \"Mega Drive\"}\nprint(consoles, \"len\", len(consoles))\nconsoles.add(\"Mega Drive\")\nprint(\"After add Mega Drive\", consoles)\nconsoles.add(\"PSP\")\nprint(\"After add PSP\", consoles)\nprint(\"New set after union\", consoles.union({\"Nintendo\", \"Super Nintendo\"}))\nprint(\"Mega Drive\" in consoles)\nprint(\"Game Gear\" in consoles)\n</pre> # set: ensemble de valeurs uniques non ordonn\u00e9es consoles = {\"Super Nintendo\", \"Mega Drive\"} print(consoles, \"len\", len(consoles)) consoles.add(\"Mega Drive\") print(\"After add Mega Drive\", consoles) consoles.add(\"PSP\") print(\"After add PSP\", consoles) print(\"New set after union\", consoles.union({\"Nintendo\", \"Super Nintendo\"})) print(\"Mega Drive\" in consoles) print(\"Game Gear\" in consoles) <pre>{'Mega Drive', 'Super Nintendo'} len 2\nAfter add Mega Drive {'Mega Drive', 'Super Nintendo'}\nAfter add PSP {'PSP', 'Mega Drive', 'Super Nintendo'}\nNew set after union {'PSP', 'Super Nintendo', 'Mega Drive', 'Nintendo'}\nTrue\nFalse\n</pre>"},{"location":"python-tour/#rappls-de-python","title":"Rappls de Python\u00b6","text":"<p>Cette section fait un tour rapide du langage python.</p>"},{"location":"python-tour/#caracteritiques","title":"Caract\u00e9ritiques\u00b6","text":"<ul> <li>Caract\u00e9ritiques de Python: interpr\u00eat\u00e9, typage dynamique, typage implicite, fortement typ\u00e9, orient\u00e9 objet et fonctionnel</li> <li>Interpr\u00eat\u00e9: le script est ex\u00e9cut\u00e9 directement par un interpr\u00eateur sans le transformer pr\u00e9alablement en code machine. Exemple: JavaScript et PHP.</li> <li>Typage dynamique: le type d'une variable peut changer dans le temps</li> <li>Typage implicite: le type d'une variable esr inf\u00e9r\u00e9 par l'interpr\u00eateur et le d\u00e9veloppeur n'a pas besoin de le pr\u00e9ciser</li> <li>Fortement typ\u00e9: Les variables ont un type qui est pris en compte lors des op\u00e9rations</li> <li>On suit par d\u00e9faut la convention du snake case</li> </ul>"},{"location":"python-tour/#fonctions","title":"Fonctions\u00b6","text":""},{"location":"python-tour/#structure-de-controle","title":"Structure de contr\u00f4le\u00b6","text":"<ul> <li>Instruction: ligne de code</li> <li>Expression tout ce qui a une valeur. Exemples d'expression:<ul> <li>2</li> <li>2 % 10</li> <li>x + 7</li> <li>add(3, 5)</li> <li>selon les langages, l'affectation est une expression: 3 + (x = 6) . Ce n'est pas le cas en Python \u00e0 priori.</li> <li>print -&gt; None</li> </ul> </li> </ul>"},{"location":"python-tour/#collections","title":"Collections\u00b6","text":"<ul> <li>Une collection est une structure de donn\u00e9es qui permet de g\u00e9rer un ensemble d'\u00e9l\u00e9ments</li> <li>Python propose des types de collections de base: listes, tuples, dictionnaires et ensembles</li> <li>Des m\u00e9thodes et fonctions communes sont disponibles comme <code>len</code>, <code>append</code>, <code>pop</code> et <code>push</code>.</li> </ul>"}]}